/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminParticipantRouteImport } from './routes/admin/participant'
import { Route as AdminConfigurationRouteImport } from './routes/admin/configuration'
import { Route as AdminContestIndexRouteImport } from './routes/admin/contest/index'
import { Route as AppContestContestIdRouteImport } from './routes/app/contest/$contestId'
import { Route as AdminContestNewRouteImport } from './routes/admin/contest/new'
import { Route as AppContestContestIdSubmissionsRouteImport } from './routes/app/contest/$contestId/submissions'
import { Route as AppContestContestIdProblemRouteImport } from './routes/app/contest/$contestId/problem'
import { Route as AppContestContestIdLeaderboardRouteImport } from './routes/app/contest/$contestId/leaderboard'
import { Route as AppContestContestIdProblemIndexRouteImport } from './routes/app/contest/$contestId/problem/index'
import { Route as AppContestContestIdProblemProblemIdRouteImport } from './routes/app/contest/$contestId/problem/$problemId'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api/$'

const rootServerRouteImport = createServerRootRoute()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminParticipantRoute = AdminParticipantRouteImport.update({
  id: '/participant',
  path: '/participant',
  getParentRoute: () => AdminRoute,
} as any)
const AdminConfigurationRoute = AdminConfigurationRouteImport.update({
  id: '/configuration',
  path: '/configuration',
  getParentRoute: () => AdminRoute,
} as any)
const AdminContestIndexRoute = AdminContestIndexRouteImport.update({
  id: '/contest/',
  path: '/contest/',
  getParentRoute: () => AdminRoute,
} as any)
const AppContestContestIdRoute = AppContestContestIdRouteImport.update({
  id: '/app/contest/$contestId',
  path: '/app/contest/$contestId',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminContestNewRoute = AdminContestNewRouteImport.update({
  id: '/contest/new',
  path: '/contest/new',
  getParentRoute: () => AdminRoute,
} as any)
const AppContestContestIdSubmissionsRoute =
  AppContestContestIdSubmissionsRouteImport.update({
    id: '/submissions',
    path: '/submissions',
    getParentRoute: () => AppContestContestIdRoute,
  } as any)
const AppContestContestIdProblemRoute =
  AppContestContestIdProblemRouteImport.update({
    id: '/problem',
    path: '/problem',
    getParentRoute: () => AppContestContestIdRoute,
  } as any)
const AppContestContestIdLeaderboardRoute =
  AppContestContestIdLeaderboardRouteImport.update({
    id: '/leaderboard',
    path: '/leaderboard',
    getParentRoute: () => AppContestContestIdRoute,
  } as any)
const AppContestContestIdProblemIndexRoute =
  AppContestContestIdProblemIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AppContestContestIdProblemRoute,
  } as any)
const AppContestContestIdProblemProblemIdRoute =
  AppContestContestIdProblemProblemIdRouteImport.update({
    id: '/$problemId',
    path: '/$problemId',
    getParentRoute: () => AppContestContestIdProblemRoute,
  } as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/configuration': typeof AdminConfigurationRoute
  '/admin/participant': typeof AdminParticipantRoute
  '/admin/': typeof AdminIndexRoute
  '/app': typeof AppIndexRoute
  '/admin/contest/new': typeof AdminContestNewRoute
  '/app/contest/$contestId': typeof AppContestContestIdRouteWithChildren
  '/admin/contest': typeof AdminContestIndexRoute
  '/app/contest/$contestId/leaderboard': typeof AppContestContestIdLeaderboardRoute
  '/app/contest/$contestId/problem': typeof AppContestContestIdProblemRouteWithChildren
  '/app/contest/$contestId/submissions': typeof AppContestContestIdSubmissionsRoute
  '/app/contest/$contestId/problem/$problemId': typeof AppContestContestIdProblemProblemIdRoute
  '/app/contest/$contestId/problem/': typeof AppContestContestIdProblemIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/configuration': typeof AdminConfigurationRoute
  '/admin/participant': typeof AdminParticipantRoute
  '/admin': typeof AdminIndexRoute
  '/app': typeof AppIndexRoute
  '/admin/contest/new': typeof AdminContestNewRoute
  '/app/contest/$contestId': typeof AppContestContestIdRouteWithChildren
  '/admin/contest': typeof AdminContestIndexRoute
  '/app/contest/$contestId/leaderboard': typeof AppContestContestIdLeaderboardRoute
  '/app/contest/$contestId/submissions': typeof AppContestContestIdSubmissionsRoute
  '/app/contest/$contestId/problem/$problemId': typeof AppContestContestIdProblemProblemIdRoute
  '/app/contest/$contestId/problem': typeof AppContestContestIdProblemIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/configuration': typeof AdminConfigurationRoute
  '/admin/participant': typeof AdminParticipantRoute
  '/admin/': typeof AdminIndexRoute
  '/app/': typeof AppIndexRoute
  '/admin/contest/new': typeof AdminContestNewRoute
  '/app/contest/$contestId': typeof AppContestContestIdRouteWithChildren
  '/admin/contest/': typeof AdminContestIndexRoute
  '/app/contest/$contestId/leaderboard': typeof AppContestContestIdLeaderboardRoute
  '/app/contest/$contestId/problem': typeof AppContestContestIdProblemRouteWithChildren
  '/app/contest/$contestId/submissions': typeof AppContestContestIdSubmissionsRoute
  '/app/contest/$contestId/problem/$problemId': typeof AppContestContestIdProblemProblemIdRoute
  '/app/contest/$contestId/problem/': typeof AppContestContestIdProblemIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/admin/configuration'
    | '/admin/participant'
    | '/admin/'
    | '/app'
    | '/admin/contest/new'
    | '/app/contest/$contestId'
    | '/admin/contest'
    | '/app/contest/$contestId/leaderboard'
    | '/app/contest/$contestId/problem'
    | '/app/contest/$contestId/submissions'
    | '/app/contest/$contestId/problem/$problemId'
    | '/app/contest/$contestId/problem/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/admin/configuration'
    | '/admin/participant'
    | '/admin'
    | '/app'
    | '/admin/contest/new'
    | '/app/contest/$contestId'
    | '/admin/contest'
    | '/app/contest/$contestId/leaderboard'
    | '/app/contest/$contestId/submissions'
    | '/app/contest/$contestId/problem/$problemId'
    | '/app/contest/$contestId/problem'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/admin/configuration'
    | '/admin/participant'
    | '/admin/'
    | '/app/'
    | '/admin/contest/new'
    | '/app/contest/$contestId'
    | '/admin/contest/'
    | '/app/contest/$contestId/leaderboard'
    | '/app/contest/$contestId/problem'
    | '/app/contest/$contestId/submissions'
    | '/app/contest/$contestId/problem/$problemId'
    | '/app/contest/$contestId/problem/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
  AppIndexRoute: typeof AppIndexRoute
  AppContestContestIdRoute: typeof AppContestContestIdRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$'
  id: '__root__' | '/api/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/participant': {
      id: '/admin/participant'
      path: '/participant'
      fullPath: '/admin/participant'
      preLoaderRoute: typeof AdminParticipantRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/configuration': {
      id: '/admin/configuration'
      path: '/configuration'
      fullPath: '/admin/configuration'
      preLoaderRoute: typeof AdminConfigurationRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/contest/': {
      id: '/admin/contest/'
      path: '/contest'
      fullPath: '/admin/contest'
      preLoaderRoute: typeof AdminContestIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/app/contest/$contestId': {
      id: '/app/contest/$contestId'
      path: '/app/contest/$contestId'
      fullPath: '/app/contest/$contestId'
      preLoaderRoute: typeof AppContestContestIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/contest/new': {
      id: '/admin/contest/new'
      path: '/contest/new'
      fullPath: '/admin/contest/new'
      preLoaderRoute: typeof AdminContestNewRouteImport
      parentRoute: typeof AdminRoute
    }
    '/app/contest/$contestId/submissions': {
      id: '/app/contest/$contestId/submissions'
      path: '/submissions'
      fullPath: '/app/contest/$contestId/submissions'
      preLoaderRoute: typeof AppContestContestIdSubmissionsRouteImport
      parentRoute: typeof AppContestContestIdRoute
    }
    '/app/contest/$contestId/problem': {
      id: '/app/contest/$contestId/problem'
      path: '/problem'
      fullPath: '/app/contest/$contestId/problem'
      preLoaderRoute: typeof AppContestContestIdProblemRouteImport
      parentRoute: typeof AppContestContestIdRoute
    }
    '/app/contest/$contestId/leaderboard': {
      id: '/app/contest/$contestId/leaderboard'
      path: '/leaderboard'
      fullPath: '/app/contest/$contestId/leaderboard'
      preLoaderRoute: typeof AppContestContestIdLeaderboardRouteImport
      parentRoute: typeof AppContestContestIdRoute
    }
    '/app/contest/$contestId/problem/': {
      id: '/app/contest/$contestId/problem/'
      path: '/'
      fullPath: '/app/contest/$contestId/problem/'
      preLoaderRoute: typeof AppContestContestIdProblemIndexRouteImport
      parentRoute: typeof AppContestContestIdProblemRoute
    }
    '/app/contest/$contestId/problem/$problemId': {
      id: '/app/contest/$contestId/problem/$problemId'
      path: '/$problemId'
      fullPath: '/app/contest/$contestId/problem/$problemId'
      preLoaderRoute: typeof AppContestContestIdProblemProblemIdRouteImport
      parentRoute: typeof AppContestContestIdProblemRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AdminRouteChildren {
  AdminConfigurationRoute: typeof AdminConfigurationRoute
  AdminParticipantRoute: typeof AdminParticipantRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminContestNewRoute: typeof AdminContestNewRoute
  AdminContestIndexRoute: typeof AdminContestIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminConfigurationRoute: AdminConfigurationRoute,
  AdminParticipantRoute: AdminParticipantRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminContestNewRoute: AdminContestNewRoute,
  AdminContestIndexRoute: AdminContestIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface AppContestContestIdProblemRouteChildren {
  AppContestContestIdProblemProblemIdRoute: typeof AppContestContestIdProblemProblemIdRoute
  AppContestContestIdProblemIndexRoute: typeof AppContestContestIdProblemIndexRoute
}

const AppContestContestIdProblemRouteChildren: AppContestContestIdProblemRouteChildren =
  {
    AppContestContestIdProblemProblemIdRoute:
      AppContestContestIdProblemProblemIdRoute,
    AppContestContestIdProblemIndexRoute: AppContestContestIdProblemIndexRoute,
  }

const AppContestContestIdProblemRouteWithChildren =
  AppContestContestIdProblemRoute._addFileChildren(
    AppContestContestIdProblemRouteChildren,
  )

interface AppContestContestIdRouteChildren {
  AppContestContestIdLeaderboardRoute: typeof AppContestContestIdLeaderboardRoute
  AppContestContestIdProblemRoute: typeof AppContestContestIdProblemRouteWithChildren
  AppContestContestIdSubmissionsRoute: typeof AppContestContestIdSubmissionsRoute
}

const AppContestContestIdRouteChildren: AppContestContestIdRouteChildren = {
  AppContestContestIdLeaderboardRoute: AppContestContestIdLeaderboardRoute,
  AppContestContestIdProblemRoute: AppContestContestIdProblemRouteWithChildren,
  AppContestContestIdSubmissionsRoute: AppContestContestIdSubmissionsRoute,
}

const AppContestContestIdRouteWithChildren =
  AppContestContestIdRoute._addFileChildren(AppContestContestIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
  AppIndexRoute: AppIndexRoute,
  AppContestContestIdRoute: AppContestContestIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
