/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppRouteImport } from './routes/app'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AppDashboardRouteImport } from './routes/app/_dashboard'
import { Route as ApiSplatRouteImport } from './routes/api/$'
import { Route as AdminParticipantRouteImport } from './routes/admin/participant'
import { Route as AdminLanguagesRouteImport } from './routes/admin/languages'
import { Route as AdminConfigurationRouteImport } from './routes/admin/configuration'
import { Route as AppDashboardIndexRouteImport } from './routes/app/_dashboard/index'
import { Route as AdminContestIndexRouteImport } from './routes/admin/contest/index'
import { Route as AppContestIdRouteImport } from './routes/app/contest/$id'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as AdminContestNewRouteImport } from './routes/admin/contest/new'
import { Route as AdminContestIdRouteImport } from './routes/admin/contest/$id'
import { Route as AppContestIdIndexRouteImport } from './routes/app/contest/$id/index'
import { Route as AdminContestIdIndexRouteImport } from './routes/admin/contest/$id/index'
import { Route as AppContestIdSubmissionRouteImport } from './routes/app/contest/$id/submission'
import { Route as AppContestIdProblemRouteImport } from './routes/app/contest/$id/problem'
import { Route as AppContestIdLeaderboardRouteImport } from './routes/app/contest/$id/leaderboard'
import { Route as AppDashboardSubmissionIdRouteImport } from './routes/app/_dashboard/submission/$id'
import { Route as AdminContestIdSettingsRouteImport } from './routes/admin/contest/$id/settings'
import { Route as AppContestIdProblemIndexRouteImport } from './routes/app/contest/$id/problem/index'
import { Route as AdminContestIdProblemIndexRouteImport } from './routes/admin/contest/$id/problem/index'
import { Route as AppContestIdProblemProblemRouteImport } from './routes/app/contest/$id/problem/$problem'
import { Route as AdminContestIdProblemNewRouteImport } from './routes/admin/contest/$id/problem/new'
import { Route as AdminContestIdProblemProblemRouteImport } from './routes/admin/contest/$id/problem/$problem'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => AppRoute,
} as any)
const ApiSplatRoute = ApiSplatRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminParticipantRoute = AdminParticipantRouteImport.update({
  id: '/participant',
  path: '/participant',
  getParentRoute: () => AdminRoute,
} as any)
const AdminLanguagesRoute = AdminLanguagesRouteImport.update({
  id: '/languages',
  path: '/languages',
  getParentRoute: () => AdminRoute,
} as any)
const AdminConfigurationRoute = AdminConfigurationRouteImport.update({
  id: '/configuration',
  path: '/configuration',
  getParentRoute: () => AdminRoute,
} as any)
const AppDashboardIndexRoute = AppDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppDashboardRoute,
} as any)
const AdminContestIndexRoute = AdminContestIndexRouteImport.update({
  id: '/contest/',
  path: '/contest/',
  getParentRoute: () => AdminRoute,
} as any)
const AppContestIdRoute = AppContestIdRouteImport.update({
  id: '/contest/$id',
  path: '/contest/$id',
  getParentRoute: () => AppRoute,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminContestNewRoute = AdminContestNewRouteImport.update({
  id: '/contest/new',
  path: '/contest/new',
  getParentRoute: () => AdminRoute,
} as any)
const AdminContestIdRoute = AdminContestIdRouteImport.update({
  id: '/contest/$id',
  path: '/contest/$id',
  getParentRoute: () => AdminRoute,
} as any)
const AppContestIdIndexRoute = AppContestIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppContestIdRoute,
} as any)
const AdminContestIdIndexRoute = AdminContestIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminContestIdRoute,
} as any)
const AppContestIdSubmissionRoute = AppContestIdSubmissionRouteImport.update({
  id: '/submission',
  path: '/submission',
  getParentRoute: () => AppContestIdRoute,
} as any)
const AppContestIdProblemRoute = AppContestIdProblemRouteImport.update({
  id: '/problem',
  path: '/problem',
  getParentRoute: () => AppContestIdRoute,
} as any)
const AppContestIdLeaderboardRoute = AppContestIdLeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => AppContestIdRoute,
} as any)
const AppDashboardSubmissionIdRoute =
  AppDashboardSubmissionIdRouteImport.update({
    id: '/submission/$id',
    path: '/submission/$id',
    getParentRoute: () => AppDashboardRoute,
  } as any)
const AdminContestIdSettingsRoute = AdminContestIdSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminContestIdRoute,
} as any)
const AppContestIdProblemIndexRoute =
  AppContestIdProblemIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AppContestIdProblemRoute,
  } as any)
const AdminContestIdProblemIndexRoute =
  AdminContestIdProblemIndexRouteImport.update({
    id: '/problem/',
    path: '/problem/',
    getParentRoute: () => AdminContestIdRoute,
  } as any)
const AppContestIdProblemProblemRoute =
  AppContestIdProblemProblemRouteImport.update({
    id: '/$problem',
    path: '/$problem',
    getParentRoute: () => AppContestIdProblemRoute,
  } as any)
const AdminContestIdProblemNewRoute =
  AdminContestIdProblemNewRouteImport.update({
    id: '/problem/new',
    path: '/problem/new',
    getParentRoute: () => AdminContestIdRoute,
  } as any)
const AdminContestIdProblemProblemRoute =
  AdminContestIdProblemProblemRouteImport.update({
    id: '/problem/$problem',
    path: '/problem/$problem',
    getParentRoute: () => AdminContestIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/app': typeof AppDashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/configuration': typeof AdminConfigurationRoute
  '/admin/languages': typeof AdminLanguagesRoute
  '/admin/participant': typeof AdminParticipantRoute
  '/api/$': typeof ApiSplatRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/contest/$id': typeof AdminContestIdRouteWithChildren
  '/admin/contest/new': typeof AdminContestNewRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/app/contest/$id': typeof AppContestIdRouteWithChildren
  '/admin/contest': typeof AdminContestIndexRoute
  '/app/': typeof AppDashboardIndexRoute
  '/admin/contest/$id/settings': typeof AdminContestIdSettingsRoute
  '/app/submission/$id': typeof AppDashboardSubmissionIdRoute
  '/app/contest/$id/leaderboard': typeof AppContestIdLeaderboardRoute
  '/app/contest/$id/problem': typeof AppContestIdProblemRouteWithChildren
  '/app/contest/$id/submission': typeof AppContestIdSubmissionRoute
  '/admin/contest/$id/': typeof AdminContestIdIndexRoute
  '/app/contest/$id/': typeof AppContestIdIndexRoute
  '/admin/contest/$id/problem/$problem': typeof AdminContestIdProblemProblemRoute
  '/admin/contest/$id/problem/new': typeof AdminContestIdProblemNewRoute
  '/app/contest/$id/problem/$problem': typeof AppContestIdProblemProblemRoute
  '/admin/contest/$id/problem': typeof AdminContestIdProblemIndexRoute
  '/app/contest/$id/problem/': typeof AppContestIdProblemIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppDashboardIndexRoute
  '/login': typeof LoginRoute
  '/admin/configuration': typeof AdminConfigurationRoute
  '/admin/languages': typeof AdminLanguagesRoute
  '/admin/participant': typeof AdminParticipantRoute
  '/api/$': typeof ApiSplatRoute
  '/admin': typeof AdminIndexRoute
  '/admin/contest/new': typeof AdminContestNewRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/admin/contest': typeof AdminContestIndexRoute
  '/admin/contest/$id/settings': typeof AdminContestIdSettingsRoute
  '/app/submission/$id': typeof AppDashboardSubmissionIdRoute
  '/app/contest/$id/leaderboard': typeof AppContestIdLeaderboardRoute
  '/app/contest/$id/submission': typeof AppContestIdSubmissionRoute
  '/admin/contest/$id': typeof AdminContestIdIndexRoute
  '/app/contest/$id': typeof AppContestIdIndexRoute
  '/admin/contest/$id/problem/$problem': typeof AdminContestIdProblemProblemRoute
  '/admin/contest/$id/problem/new': typeof AdminContestIdProblemNewRoute
  '/app/contest/$id/problem/$problem': typeof AppContestIdProblemProblemRoute
  '/admin/contest/$id/problem': typeof AdminContestIdProblemIndexRoute
  '/app/contest/$id/problem': typeof AppContestIdProblemIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/configuration': typeof AdminConfigurationRoute
  '/admin/languages': typeof AdminLanguagesRoute
  '/admin/participant': typeof AdminParticipantRoute
  '/api/$': typeof ApiSplatRoute
  '/app/_dashboard': typeof AppDashboardRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/admin/contest/$id': typeof AdminContestIdRouteWithChildren
  '/admin/contest/new': typeof AdminContestNewRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/app/contest/$id': typeof AppContestIdRouteWithChildren
  '/admin/contest/': typeof AdminContestIndexRoute
  '/app/_dashboard/': typeof AppDashboardIndexRoute
  '/admin/contest/$id/settings': typeof AdminContestIdSettingsRoute
  '/app/_dashboard/submission/$id': typeof AppDashboardSubmissionIdRoute
  '/app/contest/$id/leaderboard': typeof AppContestIdLeaderboardRoute
  '/app/contest/$id/problem': typeof AppContestIdProblemRouteWithChildren
  '/app/contest/$id/submission': typeof AppContestIdSubmissionRoute
  '/admin/contest/$id/': typeof AdminContestIdIndexRoute
  '/app/contest/$id/': typeof AppContestIdIndexRoute
  '/admin/contest/$id/problem/$problem': typeof AdminContestIdProblemProblemRoute
  '/admin/contest/$id/problem/new': typeof AdminContestIdProblemNewRoute
  '/app/contest/$id/problem/$problem': typeof AppContestIdProblemProblemRoute
  '/admin/contest/$id/problem/': typeof AdminContestIdProblemIndexRoute
  '/app/contest/$id/problem/': typeof AppContestIdProblemIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/app'
    | '/login'
    | '/admin/configuration'
    | '/admin/languages'
    | '/admin/participant'
    | '/api/$'
    | '/admin/'
    | '/admin/contest/$id'
    | '/admin/contest/new'
    | '/api/auth/$'
    | '/app/contest/$id'
    | '/admin/contest'
    | '/app/'
    | '/admin/contest/$id/settings'
    | '/app/submission/$id'
    | '/app/contest/$id/leaderboard'
    | '/app/contest/$id/problem'
    | '/app/contest/$id/submission'
    | '/admin/contest/$id/'
    | '/app/contest/$id/'
    | '/admin/contest/$id/problem/$problem'
    | '/admin/contest/$id/problem/new'
    | '/app/contest/$id/problem/$problem'
    | '/admin/contest/$id/problem'
    | '/app/contest/$id/problem/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/login'
    | '/admin/configuration'
    | '/admin/languages'
    | '/admin/participant'
    | '/api/$'
    | '/admin'
    | '/admin/contest/new'
    | '/api/auth/$'
    | '/admin/contest'
    | '/admin/contest/$id/settings'
    | '/app/submission/$id'
    | '/app/contest/$id/leaderboard'
    | '/app/contest/$id/submission'
    | '/admin/contest/$id'
    | '/app/contest/$id'
    | '/admin/contest/$id/problem/$problem'
    | '/admin/contest/$id/problem/new'
    | '/app/contest/$id/problem/$problem'
    | '/admin/contest/$id/problem'
    | '/app/contest/$id/problem'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/app'
    | '/login'
    | '/admin/configuration'
    | '/admin/languages'
    | '/admin/participant'
    | '/api/$'
    | '/app/_dashboard'
    | '/admin/'
    | '/admin/contest/$id'
    | '/admin/contest/new'
    | '/api/auth/$'
    | '/app/contest/$id'
    | '/admin/contest/'
    | '/app/_dashboard/'
    | '/admin/contest/$id/settings'
    | '/app/_dashboard/submission/$id'
    | '/app/contest/$id/leaderboard'
    | '/app/contest/$id/problem'
    | '/app/contest/$id/submission'
    | '/admin/contest/$id/'
    | '/app/contest/$id/'
    | '/admin/contest/$id/problem/$problem'
    | '/admin/contest/$id/problem/new'
    | '/app/contest/$id/problem/$problem'
    | '/admin/contest/$id/problem/'
    | '/app/contest/$id/problem/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
  ApiSplatRoute: typeof ApiSplatRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/app/_dashboard': {
      id: '/app/_dashboard'
      path: ''
      fullPath: '/app'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRoute
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/participant': {
      id: '/admin/participant'
      path: '/participant'
      fullPath: '/admin/participant'
      preLoaderRoute: typeof AdminParticipantRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/languages': {
      id: '/admin/languages'
      path: '/languages'
      fullPath: '/admin/languages'
      preLoaderRoute: typeof AdminLanguagesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/configuration': {
      id: '/admin/configuration'
      path: '/configuration'
      fullPath: '/admin/configuration'
      preLoaderRoute: typeof AdminConfigurationRouteImport
      parentRoute: typeof AdminRoute
    }
    '/app/_dashboard/': {
      id: '/app/_dashboard/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppDashboardIndexRouteImport
      parentRoute: typeof AppDashboardRoute
    }
    '/admin/contest/': {
      id: '/admin/contest/'
      path: '/contest'
      fullPath: '/admin/contest'
      preLoaderRoute: typeof AdminContestIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/app/contest/$id': {
      id: '/app/contest/$id'
      path: '/contest/$id'
      fullPath: '/app/contest/$id'
      preLoaderRoute: typeof AppContestIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/contest/new': {
      id: '/admin/contest/new'
      path: '/contest/new'
      fullPath: '/admin/contest/new'
      preLoaderRoute: typeof AdminContestNewRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/contest/$id': {
      id: '/admin/contest/$id'
      path: '/contest/$id'
      fullPath: '/admin/contest/$id'
      preLoaderRoute: typeof AdminContestIdRouteImport
      parentRoute: typeof AdminRoute
    }
    '/app/contest/$id/': {
      id: '/app/contest/$id/'
      path: '/'
      fullPath: '/app/contest/$id/'
      preLoaderRoute: typeof AppContestIdIndexRouteImport
      parentRoute: typeof AppContestIdRoute
    }
    '/admin/contest/$id/': {
      id: '/admin/contest/$id/'
      path: '/'
      fullPath: '/admin/contest/$id/'
      preLoaderRoute: typeof AdminContestIdIndexRouteImport
      parentRoute: typeof AdminContestIdRoute
    }
    '/app/contest/$id/submission': {
      id: '/app/contest/$id/submission'
      path: '/submission'
      fullPath: '/app/contest/$id/submission'
      preLoaderRoute: typeof AppContestIdSubmissionRouteImport
      parentRoute: typeof AppContestIdRoute
    }
    '/app/contest/$id/problem': {
      id: '/app/contest/$id/problem'
      path: '/problem'
      fullPath: '/app/contest/$id/problem'
      preLoaderRoute: typeof AppContestIdProblemRouteImport
      parentRoute: typeof AppContestIdRoute
    }
    '/app/contest/$id/leaderboard': {
      id: '/app/contest/$id/leaderboard'
      path: '/leaderboard'
      fullPath: '/app/contest/$id/leaderboard'
      preLoaderRoute: typeof AppContestIdLeaderboardRouteImport
      parentRoute: typeof AppContestIdRoute
    }
    '/app/_dashboard/submission/$id': {
      id: '/app/_dashboard/submission/$id'
      path: '/submission/$id'
      fullPath: '/app/submission/$id'
      preLoaderRoute: typeof AppDashboardSubmissionIdRouteImport
      parentRoute: typeof AppDashboardRoute
    }
    '/admin/contest/$id/settings': {
      id: '/admin/contest/$id/settings'
      path: '/settings'
      fullPath: '/admin/contest/$id/settings'
      preLoaderRoute: typeof AdminContestIdSettingsRouteImport
      parentRoute: typeof AdminContestIdRoute
    }
    '/app/contest/$id/problem/': {
      id: '/app/contest/$id/problem/'
      path: '/'
      fullPath: '/app/contest/$id/problem/'
      preLoaderRoute: typeof AppContestIdProblemIndexRouteImport
      parentRoute: typeof AppContestIdProblemRoute
    }
    '/admin/contest/$id/problem/': {
      id: '/admin/contest/$id/problem/'
      path: '/problem'
      fullPath: '/admin/contest/$id/problem'
      preLoaderRoute: typeof AdminContestIdProblemIndexRouteImport
      parentRoute: typeof AdminContestIdRoute
    }
    '/app/contest/$id/problem/$problem': {
      id: '/app/contest/$id/problem/$problem'
      path: '/$problem'
      fullPath: '/app/contest/$id/problem/$problem'
      preLoaderRoute: typeof AppContestIdProblemProblemRouteImport
      parentRoute: typeof AppContestIdProblemRoute
    }
    '/admin/contest/$id/problem/new': {
      id: '/admin/contest/$id/problem/new'
      path: '/problem/new'
      fullPath: '/admin/contest/$id/problem/new'
      preLoaderRoute: typeof AdminContestIdProblemNewRouteImport
      parentRoute: typeof AdminContestIdRoute
    }
    '/admin/contest/$id/problem/$problem': {
      id: '/admin/contest/$id/problem/$problem'
      path: '/problem/$problem'
      fullPath: '/admin/contest/$id/problem/$problem'
      preLoaderRoute: typeof AdminContestIdProblemProblemRouteImport
      parentRoute: typeof AdminContestIdRoute
    }
  }
}

interface AdminContestIdRouteChildren {
  AdminContestIdSettingsRoute: typeof AdminContestIdSettingsRoute
  AdminContestIdIndexRoute: typeof AdminContestIdIndexRoute
  AdminContestIdProblemProblemRoute: typeof AdminContestIdProblemProblemRoute
  AdminContestIdProblemNewRoute: typeof AdminContestIdProblemNewRoute
  AdminContestIdProblemIndexRoute: typeof AdminContestIdProblemIndexRoute
}

const AdminContestIdRouteChildren: AdminContestIdRouteChildren = {
  AdminContestIdSettingsRoute: AdminContestIdSettingsRoute,
  AdminContestIdIndexRoute: AdminContestIdIndexRoute,
  AdminContestIdProblemProblemRoute: AdminContestIdProblemProblemRoute,
  AdminContestIdProblemNewRoute: AdminContestIdProblemNewRoute,
  AdminContestIdProblemIndexRoute: AdminContestIdProblemIndexRoute,
}

const AdminContestIdRouteWithChildren = AdminContestIdRoute._addFileChildren(
  AdminContestIdRouteChildren,
)

interface AdminRouteChildren {
  AdminConfigurationRoute: typeof AdminConfigurationRoute
  AdminLanguagesRoute: typeof AdminLanguagesRoute
  AdminParticipantRoute: typeof AdminParticipantRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminContestIdRoute: typeof AdminContestIdRouteWithChildren
  AdminContestNewRoute: typeof AdminContestNewRoute
  AdminContestIndexRoute: typeof AdminContestIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminConfigurationRoute: AdminConfigurationRoute,
  AdminLanguagesRoute: AdminLanguagesRoute,
  AdminParticipantRoute: AdminParticipantRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminContestIdRoute: AdminContestIdRouteWithChildren,
  AdminContestNewRoute: AdminContestNewRoute,
  AdminContestIndexRoute: AdminContestIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface AppDashboardRouteChildren {
  AppDashboardIndexRoute: typeof AppDashboardIndexRoute
  AppDashboardSubmissionIdRoute: typeof AppDashboardSubmissionIdRoute
}

const AppDashboardRouteChildren: AppDashboardRouteChildren = {
  AppDashboardIndexRoute: AppDashboardIndexRoute,
  AppDashboardSubmissionIdRoute: AppDashboardSubmissionIdRoute,
}

const AppDashboardRouteWithChildren = AppDashboardRoute._addFileChildren(
  AppDashboardRouteChildren,
)

interface AppContestIdProblemRouteChildren {
  AppContestIdProblemProblemRoute: typeof AppContestIdProblemProblemRoute
  AppContestIdProblemIndexRoute: typeof AppContestIdProblemIndexRoute
}

const AppContestIdProblemRouteChildren: AppContestIdProblemRouteChildren = {
  AppContestIdProblemProblemRoute: AppContestIdProblemProblemRoute,
  AppContestIdProblemIndexRoute: AppContestIdProblemIndexRoute,
}

const AppContestIdProblemRouteWithChildren =
  AppContestIdProblemRoute._addFileChildren(AppContestIdProblemRouteChildren)

interface AppContestIdRouteChildren {
  AppContestIdLeaderboardRoute: typeof AppContestIdLeaderboardRoute
  AppContestIdProblemRoute: typeof AppContestIdProblemRouteWithChildren
  AppContestIdSubmissionRoute: typeof AppContestIdSubmissionRoute
  AppContestIdIndexRoute: typeof AppContestIdIndexRoute
}

const AppContestIdRouteChildren: AppContestIdRouteChildren = {
  AppContestIdLeaderboardRoute: AppContestIdLeaderboardRoute,
  AppContestIdProblemRoute: AppContestIdProblemRouteWithChildren,
  AppContestIdSubmissionRoute: AppContestIdSubmissionRoute,
  AppContestIdIndexRoute: AppContestIdIndexRoute,
}

const AppContestIdRouteWithChildren = AppContestIdRoute._addFileChildren(
  AppContestIdRouteChildren,
)

interface AppRouteChildren {
  AppDashboardRoute: typeof AppDashboardRouteWithChildren
  AppContestIdRoute: typeof AppContestIdRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppDashboardRoute: AppDashboardRouteWithChildren,
  AppContestIdRoute: AppContestIdRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
  ApiSplatRoute: ApiSplatRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
